
This program demonstrates the action of a 2x2 matrix A on two eigenvectors u and v. 

1. Import the necessary libraries: numpy for numerical operations and matplotlib.pyplot for plotting.
2. Define the matrix A as a 2x2 numpy array.
3. Define eigenvectors u and v as numpy arrays.
4. Compute the action of matrix A on eigenvectors u and v using the dot product.
5. Set up the plotting environment with two subplots.
6. In the first subplot, plot eigenvector u and its transformed vector Au using plt.plot().
7. In the second subplot, plot eigenvector v and its transformed vector Av using plt.plot().
8. Add labels, titles, and legends to the plots for clarity.
9. Adjust the layout and display the plots using plt.tight_layout() and plt.show().

import numpy as np
import matplotlib.pyplot as plt

# Define matrix A
A = np.array([[1,6], [5,2]])

# Define eigenvectors u and v
u = np.array([6,-5])  # Eigenvector corresponding to eigenvalue 3
v = np.array([3,-2]) # Eigenvector corresponding to eigenvalue 1

# Apply matrix A to eigenvectors u and v
Au = np.dot(A, u)
Av = np.dot(A, v)

# Plotting
plt.figure(figsize=(8, 4))

# Plot u and Au
plt.subplot(1, 2, 1)
plt.plot([0, u[0]], [0, u[1]], 'b-', label='u')
plt.plot([0, Au[0]], [0, Au[1]], 'r-', label='Au')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Action of A on u')
plt.axis('equal')
plt.legend()

# Plot v and Av
plt.subplot(1, 2, 2)
plt.plot([0, v[0]], [0, v[1]], 'b-', label='v')
plt.plot([0, Av[0]], [0, Av[1]], 'r-', label='Av')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Action of A on v')
plt.axis('equal')
plt.legend()

plt.tight_layout()
plt.show()

